import React, { useState, useEffect,useRef } from "react";
import { io } from "socket.io-client";
import SlotModal from "../Asset/SlotModal";
import ParkingLayou4C from "./Room4C";
import ScanTrolley from "../Asset/ScanTrolley";
import CheckTrolley from "../Asset/CheckTrolley";
const API_URL = import.meta.env.VITE_API_URL;

const ParentComponent4C = () => {
  const [selectedSlot, setSelectedSlot] = useState(null);
  const [showSlotModal, setShowSlotModal] = useState(false); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ô‡∏µ‡πâ
  const [selectedOption, setSelectedOption] = useState(null);
  const [isScanTrolleyOpen, setIsScanTrolleyOpen] = useState(false);
  const [isCheckTrolleyOpen, setIsCheckTrolleyOpen] = useState(false);
  const [trolleyData, setTrolleyData] = useState(null);
  const [socket, setSocket] = useState(null);
  const [processingSlot, setProcessingSlot] = useState(null);

  const socketRef = useRef(null);


  useEffect(() => {
    if (!API_URL) {
      console.error("‚ùå API_URL is not defined.");
      return;
    }
  
    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Socket.IO ‡πÑ‡∏õ‡∏ó‡∏µ‡πà API_URL
     const newSocket = io(API_URL, {
            transports: ["websocket"],
            reconnectionAttempts: 5, // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏≠‡∏á reconnect
            reconnectionDelay: 1000, // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£ reconnect
            autoConnect: true
          });
      socketRef.current = newSocket;
          setSocket(newSocket);
    newSocket.on("connect", () => {
      console.log("‚úÖ Socket connected:", newSocket.id);
    });
  
    newSocket.on("disconnect", () => {
      console.warn("‚ö†Ô∏è Socket disconnected.");
    });
  
    setSocket(newSocket);
  
    // Cleanup function
       if (socketRef.current) {
        socketRef.current.disconnect();
        socketRef.current = null;
      }
  }, []);
  const handleSlotClick = async (slotData) => {
    if (processingSlot === slotData.slot_id) {
      // ‡∏Å‡∏£‡∏ì‡∏µ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏°‡∏î‡∏±‡∏•‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      setShowSlotModal(true);
      return;
    }
  
    setSelectedSlot(slotData);
    setProcessingSlot(slotData.slot_id);
    setShowSlotModal(true); // ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏°‡∏î‡∏±‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏à‡∏≠‡∏î
  
    try {
      console.log("üì° Sending request to API:", {
        slot_id: slotData.slot_id,
        cs_id: slotData.cs_id,
      });
  
      const response = await fetch(`${API_URL}/api/coldstorage/update-rsrv-slot`, {
        method: "PUT",
        credentials: "include",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          slot_id: slotData.slot_id,
          cs_id: slotData.cs_id,
        }),
      });
  
      console.log("üì© API Response:", response);
  
      // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ response ‡πÄ‡∏õ‡πá‡∏ô JSON ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const contentType = response.headers.get("content-type");
      if (!response.ok) {
        const errorText = await response.text(); // ‡∏≠‡πà‡∏≤‡∏ô response ‡πÄ‡∏õ‡πá‡∏ô text
        throw new Error(`Failed to update slot reservation: ${errorText}`);
      }
  
      if (!contentType || !contentType.includes("application/json")) {
        throw new Error("API did not return JSON. Check server response.");
      }
  
      const data = await response.json();
      console.log("üì© API Response Data:", data);
  
      if (!data.success) {
        throw new Error(`Failed to update slot reservation: ${data.message || "Unknown error"}`);
      }
  
      console.log("‚úÖ Slot reservation updated successfully");
  
      if (socket) {
        socket.emit("reserveSlot", {
          slot_id: slotData.slot_id,
          cs_id: slotData.cs_id,
        });
      }
    } catch (error) {
      console.error("‚ùå Error updating slot reservation:", error);
    }
  };
  
  // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô closeSlotModal
  const closeSlotModal = async (action) => {
    console.log("üìå closeSlotModal called with action:", action);
    
    // ‡∏õ‡∏¥‡∏î‡πÇ‡∏°‡∏î‡∏±‡∏•‡∏ó‡∏∏‡∏Å‡∏Å‡∏£‡∏ì‡∏µ
    setShowSlotModal(false);
    
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï processingSlot ‡∏ó‡∏∏‡∏Å‡∏Å‡∏£‡∏ì‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å
    setProcessingSlot(null);
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
    if (action === 'CANCEL_ONLY') {
      console.log("üìå CANCEL button was clicked, NOT clearing slot data");
      return; // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ‡πÑ‡∏°‡πà‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡πà‡∏≠‡∏á‡∏à‡∏≠‡∏î
    }
    
    // ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å) ‡πÉ‡∏´‡πâ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á API
    console.log("üìå This is NOT from CANCEL button, clearing slot data");
    
    if (selectedSlot) {
      try {
        const response = await fetch(`${API_URL}/api/clodstorage/update-NULL-slot`, {
          method: "PUT",
          credentials: "include",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            slot_id: selectedSlot.slot_id,
            cs_id: selectedSlot.cs_id,
          }),
        });
  
        const data = await response.json();
  
        if (response.ok) {
          console.log("‚úÖ Slot updated successfully via API:", data);
        } else {
          console.error("‚ùå Failed to update slot:", data);
        }
      } catch (error) {
        console.error("‚ùå Error updating slot via API:", error);
      }
      
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô WebSocket
      if (socket) {
        socket.emit("updateSlotToNULL", {
          slot_id: selectedSlot.slot_id,
          cs_id: selectedSlot.cs_id,
        });
        console.log("Slot updated successfully via WebSocket");
      }
    }
  
    // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ selectedSlot
    setSelectedSlot(null);
  };
  
  const handleOptionSelect = (option, slotData) => {
    setSelectedOption(option);
    setShowSlotModal(false); // ‡∏õ‡∏¥‡∏î‡πÇ‡∏°‡∏î‡∏±‡∏•‡∏ä‡πà‡∏≠‡∏á‡∏à‡∏≠‡∏î
    
    setTimeout(() => {
      setIsScanTrolleyOpen(true);
    }, 100);
  };

  const closeScanTrolley = async () => {
    setIsScanTrolleyOpen(false);
    setSelectedOption(null);
    
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï processingSlot ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å
    setProcessingSlot(null);
    
    // ‡∏™‡πà‡∏á API ‡πÅ‡∏•‡∏∞ WebSocket ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï NULL
    if (selectedSlot) {
      try {
        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô WebSocket ‡∏Å‡πà‡∏≠‡∏ô
        if (socket) {
          socket.emit("updateSlotToNULL", {
            slot_id: selectedSlot.slot_id,
            cs_id: selectedSlot.cs_id,
          });
          console.log("Slot updated successfully via WebSocket");
        }
  
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ API ‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        const response = await fetch(`${API_URL}/api/clodstorage/update-NULL-slot`, {
          method: "PUT",
          credentials: "include",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            slot_id: selectedSlot.slot_id,
            cs_id: selectedSlot.cs_id,
          }),
        });
  
        const data = await response.json();
  
        if (response.ok) {
          console.log("‚úÖ Slot updated successfully via API:", data);
        } else {
          console.error("‚ùå Failed to update slot:", data);
        }
      } catch (error) {
        console.error("‚ùå Error updating slot via API:", error);
      }
    }
  
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡πà‡∏≤‡∏á ‡πÜ
    setSelectedSlot(null);
  };
  
  const handleScanConfirm = (data) => {
    setTrolleyData(data);
    setIsScanTrolleyOpen(false);
    setIsCheckTrolleyOpen(true);
  };

  const closeCheckTrolley = async () => {
    setIsCheckTrolleyOpen(false);
    setTrolleyData(null);
    setProcessingSlot(null);
    
    // ‡∏™‡πà‡∏á API ‡πÅ‡∏•‡∏∞ WebSocket ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï NULL
    if (selectedSlot) {
      try {
        const response = await fetch(`${API_URL}/api/clodstorage/update-NULL-slot`, {
          method: "PUT",
          credentials: "include",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            slot_id: selectedSlot.slot_id,
            cs_id: selectedSlot.cs_id,
          }),
        });
  
        const data = await response.json();
  
        if (response.ok) {
          console.log("‚úÖ Slot updated successfully via API:", data);
        } else {
          console.error("‚ùå Failed to update slot:", data);
        }
      } catch (error) {
        console.error("‚ùå Error updating slot via API:", error);
      }
      
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô WebSocket
      if (selectedSlot && socket) {
        socket.emit("updateSlotToNULL", {
          slot_id: selectedSlot.slot_id,
          cs_id: selectedSlot.cs_id,
        });
        console.log("Slot updated successfully via WebSocket");
      }
    }
  
    // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• selectedSlot
    setSelectedSlot(null);
  };
  
  return (
    <div className="p-0">
      <ParkingLayou4C onSlotClick={handleSlotClick} />

      {selectedSlot && showSlotModal && !isScanTrolleyOpen && !isCheckTrolleyOpen && (
        <SlotModal
          slot={selectedSlot}
          onClose={closeSlotModal}
          onSelectOption={handleOptionSelect}
        />
      )}

      <ScanTrolley
        open={isScanTrolleyOpen}
        onClose={closeScanTrolley}
        onNext={handleScanConfirm}
        selectedOption={selectedOption}
        selectedSlot={selectedSlot}
      />

      <CheckTrolley
        open={isCheckTrolleyOpen}
        onClose={closeCheckTrolley}
        trolleyData={trolleyData}
        selectedSlot={selectedSlot}
        selectedOption={selectedOption}
      />
    </div>
  );
};

export default ParentComponent4C;